List of Command Line Commands | Codecademy
https://www.codecademy.com/articles/command-line-commands

Learn the Command Line: Navigating the File System Cheatsheet | Codecademy
https://www.codecademy.com/learn/learn-the-command-line/modules/learn-the-command-line-navigation/cheatsheet

pwd outputs the name of the current working directory.
ls lists all files and directories in the working directory.
cd switches you into the directory you specify.
mkdir creates a new directory in the working directory.
touch creates a new file inside the working directory.
ls -a lists all contents of a directory, including hidden files and directories
ls -l lists all contents in long format
ls -t orders files and directories by the time they were last modified
Multiple options can be used together, like ls -alt
cp copies files
mv moves and renames files
rm removes files
rm -r removes directories
> redirects standard output of a command to a file, overwriting previous content.
>> redirects standard output of a command to a file, appending new content to old content.
< redirects standard input to a command.
| redirects standard output of a command to another command.sort: sorts lines of text alphabetically.
uniq: filters duplicate, adjacent lines of text.
grep: searches for a text pattern and outputs it.
sed : searches for a text pattern, modifies it, and outputs it.

cd stands for “change directory”. 
Just as you would click on a folder in Windows Explorer or Finder, cd switches you into the directory you specify. 
In other words, cd changes the working directory.


The mkdir command stands for “make directory”. 
It takes in a directory name as an argument, and then creates a new directory in the current working directory.

The touch command creates a new file inside the working directory. 
It takes in a filename as an argument, and then creates an empty file in the current working directory.

$ ls
-a - lists all contents, including hidden files and directories
-l - lists all contents of a directory in long format
-t - order files and directories by the time they were last modified.
drwxr-xr-x 6  cc  eng  4096 Jun 24 16:51  drama
-rw-r--r-- 1  cc  eng     0 Jun 24 16:51  genres.txt
1.Access rights. These are actions that are permitted on a file or directory.
2.Number of hard links. This number counts the number of child directories and files. 
This number includes the parent directory link (..) and current directory link (.).
3.The username of the file’s owner. Here the username is cc.
4.The name of the group that owns the file. Here the group name is eng.
5.The size of the file in bytes.
6.The date & time that the file was last modified.
7.The name of the file or directory.

$ ls -alt
drwxr-xr-x 4 cc eng 4096 Jun 29 12:22 .
-rw-r--r-- 1 cc eng    0 Jun 29 12:22 .gitignore
drwxr-xr-x 5 cc eng 4096 Jun 30 14:20 ..
The -t option orders files and directories by the time they were last modified.
In addition to using each option separately, like ls -a or ls -l, multiple options can be used together, like ls -alt.
Here, ls -alt lists all contents, including hidden files and directories, 
in long format, ordered by the date and time they were last modified.


cp * satire/
The * selects all files in the working directory, so here we use cp to copy all files into the satire/ directory.
cp m*.txt scifi/
Here, m*.txt selects all files in the working directory starting with “m” and ending with “.txt”, and copies them to scifi/.

mv
To move a file into a directory, use mv with the source file as the first argument and the destination directory as the second argument.
To rename a file, use mv with the old file as the first argument and the new file as the second argument. 

rm
The rm command deletes files and directories. 
The -r stands for “recursive,” and it’s used to delete a directory and all of its child directories.
Be careful when you use rm! It deletes files and directories permanently. 
There isn’t an undelete command, so once you delete a file or directory with rm, it’s gone.

stdin,stdout,stderr
standard input, abbreviated as stdin, is information inputted into the terminal through the keyboard or input device.
standard output, abbreviated as stdout, is the information outputted after a process is run.
standard error, abbreviated as stderr, is an error message outputted by a failed process.

>
$ echo "Hello" > hello.txt
The > command redirects the standard output to a file. Here, "Hello" is entered as the standard input. 
The standard output "Hello" is redirected by > to the file hello.txt.
Note that > overwrites all original content in continents.txt. 
When you view the output data by typing cat on continents.txt, you will see only the contents of oceans.txt.
Another common use for > is to store the output of a program in a new file. 

>>
>> takes the standard output of the command on the left and appends (adds) it to the file on the right. 
You can view the output data of the file with cat and the filename.
Here, the output data of rivers.txt will contain the original contents of rivers.txt with the content of glaciers.txt appended to it.

<
< takes the standard input from the file on the right and inputs it into the program on the left. 
Here, lakes.txt is the standard input for the cat command. The standard output appears in the terminal.

cat
The cat command outputs the contents of a file to the terminal. 
When you type cat hello.txt, the contents of hello.txt are displayed.

|
| is a “pipe”. The | takes the standard output of the command on the left, and pipes it as standard input to the command on the right. 
You can think of this as “command to command” redirection.

wc
the wc command outputs the number of lines, words, and characters in volcanoes.txt, respectively.
$ cat volcanoes.txt | wc | cat > islands.txt 
Multiple |s can be chained together. Here the standard output of cat volcanoes.txt is “piped” to the wc command. 
The standard output of wc is then “piped” to cat. Finally, the standard output of cat is redirected to islands.txt.

uniq
uniq stands for “unique” and filters out adjacent, duplicate lines in a file.

grep
grep stands for “global regular expression print”. 
It searches files for lines that match a pattern and returns the results. It is also case sensitive.
grep -i enables the command to be case insensitive.

$ grep -R Arctic /home/ccuser/workspace/geography
grep -R searches all files in a directory and outputs filenames and lines containing matched results. 
-R stands for “recursive”. Here grep -R searches the /home/ccuser/workspace/geography directory for the 
string “Arctic” and outputs filenames and lines with matched results.

$ grep -Rl Arctic /home/ccuser/workspace/geography
grep -Rl searches all files in a directory and outputs only filenames with matched results. 
-R stands for “recursive” and l stands for “files with matches”. Here grep -Rl searches the 
/home/ccuser/workspace/geography directory for the string “Arctic” and outputs filenames with matched results.

-e. Since grep stands for global regular expressions 64, 
there should be some way to search with regular expressions instead of simply searching for exact string matches as we have been doing. 
-e enables us to do just that.
-v. This useful argument allows you to search for non-matches. 
So it is the inverse of the usual behavior of grep.
-i. This argument allows you to search for a match in a case-insensitive way. 
So for example, “hit”, “HIT”, and “HiT” all match a search for “hit”.

sed stands for “stream editor”. 
It accepts standard input and modifies it based on an expression, before displaying it as output data. 
It is similar to “find and replace”.

$ sed 's/snow/rain/' forests.txt 
s: stands for “substitution”. it is always used when using sed for substitution.
snow: the search string, the text to find.
rain: the replacement string, the text to add in place.
In this case, sed searches forests.txt for the word “snow” and replaces it with “rain.” 
Importantly, the above command will only replace the first instance of “snow” on a line.

$ sed 's/snow/rain/g' forests.txt 
The above command uses the g expression, meaning “global”. 
Here sed searches forests.txt for the word “snow” and replaces it with “rain”, globally. 
All instances of “snow” on a line will be turned to “rain”.



Question
What does ‘pwd’ stand for and what makes it useful?
Answer
It stands for ‘Print Working Directory’ and it comes in handy when you want to ensure you’re in the right directory.
If you find yourself confused about where you’ve navigated to in future lessons or in the real world, it’s helpful to 
use pwd to see where you are, and ls to see what’s available to move into.


Question
Do I have to type the full name of a directory to change into it every time? It seems like a lot of repeated, unnecessary typing.
Answer
It is unnecessary! Luckily, you can save a lot of time and keystrokes by typing enough of the directory name for it to know which 
to select and then just press tab.
For example, say you type ls and see that you have three directories available to cd into:
myFolder, yourFolder, myOtherFolder
If you type in myF and then press tab, you’ll see that it autocompletes myFolder! That comes in handy, 
especially with long file names.


Question
The uses of output redirection, >, and pipelining, |, seem similar. What is the distinction in their use?
Answer
The distinction here is between storage and use as input. Consider the following example
cat volcanoes.txt | wc
from this lesson 22. Here we’re using the result of the left side, cat volcanoes.txt, as input to the right side, wc. If we instead wrote
cat volcanoes.txt > wc
then we would use the result of the left side and store it into a file called wc. 
This is a very different behavior than what we did with | above.


Question
We are introduced to the sort function here 15. Can we use sort for sorting input not separated by newlines?
Answer
Though the function sort only works to sort input separated by newlines, just as we have been able to chain together simple 
command line functions to accomplish complex tasks, we can do the same to sort input not separated by newlines. 
In order to do this, we will need to replace the symbols separating the input we would like to sort by newlines. 
To accomplish this, we can use the sed command (which we also learn about in this section). 
For instance, if our input, in.txt, is separated by spaces instead of newlines, we can sort the file by
sed -e "s/ /\n/g" in.txt | sort
